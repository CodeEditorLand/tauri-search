[{"id":"github_tauri_apps_tauri","name":"tauri","description":"Build smaller, faster, and more secure desktop applications with a web frontend.","kind":"code","stars":39131,"watchers":39131,"subscribers":363,"openIssues":165,"forks":954,"defaultBranch":"dev","language":"Rust","topics":["hacktoberfest","high-performance","rust","webview","works-with-clojurescript","works-with-construct","works-with-elm","works-with-flutter","works-with-gatsby","works-with-mint","works-with-phaser","works-with-quasar","works-with-react","works-with-reason","works-with-svelte","works-with-vue","works-with-yew"],"isTemplate":false,"lastUpdated":"2022-05-09T08:20:45Z","createdAt":"2019-07-13T09:09:37Z","license":"Other","text":"<img src=\".github/splash.png\" alt=\"Tauri\" />\n\n[![status](https://img.shields.io/badge/Status-Beta-green.svg)](https://github.com/tauri-apps/tauri/tree/dev)\n[![License](https://img.shields.io/badge/License-MIT%20or%20Apache%202-green.svg)](https://opencollective.com/tauri)\n[![test library](https://img.shields.io/github/workflow/status/tauri-apps/tauri/test%20library?label=test%20library)](https://github.com/tauri-apps/tauri/actions?query=workflow%3A%22test+library%22)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_shield)\n\n[![Chat Server](https://img.shields.io/badge/chat-on%20discord-7289da.svg)](https://discord.gg/SpmNs4S)\n[![devto](https://img.shields.io/badge/blog-dev.to-black.svg)](https://dev.to/tauri)\n[![devto](https://img.shields.io/badge/documentation-tauri.studio-purple.svg)](https://tauri.studio/docs/getting-started/prerequisites/)\n[![https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg](https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg)](https://good-labs.github.io/greater-good-affirmation)\n[![support](https://img.shields.io/badge/sponsor-open%20collective-blue.svg)](https://opencollective.com/tauri)\n\n## Current Releases\n\n| Component                                                                       | Description                              | Version                                                                                                          | Lin | Win | Mac |\n| ------------------------------------------------------------------------------- | ---------------------------------------- | ---------------------------------------------------------------------------------------------------------------- | --- | --- | --- |\n| [**cli.rs**](https://github.com/tauri-apps/tauri/tree/dev/tooling/cli)          | create, develop and build apps           | [![](https://img.shields.io/crates/v/tauri-cli.svg)](https://crates.io/crates/tauri-cli)                         | ✅   | ✅   | ✅   |\n| [**cli.js**](https://github.com/tauri-apps/tauri/tree/dev/tooling/cli/node)     | Node.js CLI wrapper for cli.rs           | [![](https://img.shields.io/npm/v/@tauri-apps/cli.svg)](https://www.npmjs.com/package/@tauri-apps/cli)           | ✅   | ✅   | ✅   |\n| [**api.js**](https://github.com/tauri-apps/tauri/tree/dev/tooling/api)          | JS API for interaction with Rust backend | [![](https://img.shields.io/npm/v/@tauri-apps/api.svg)](https://www.npmjs.com/package/@tauri-apps/api)           | ✅   | ✅   | ✅   |\n| [**create-tauri-app**](https://github.com/tauri-apps/create-tauri-app)          | Get started with your first Tauri app    | [![](https://img.shields.io/npm/v/create-tauri-app.svg)](https://www.npmjs.com/package/create-tauri-app)         | ✅   | ✅   | ✅   |\n| [**vue-cli-plugin-tauri**](https://github.com/tauri-apps/vue-cli-plugin-tauri/) | Vue CLI plugin for Tauri                 | [![](https://img.shields.io/npm/v/vue-cli-plugin-tauri.svg)](https://www.npmjs.com/package/vue-cli-plugin-tauri) | ✅   | ✅   | ✅   |\n| [**core**](https://github.com/tauri-apps/tauri/tree/dev/core/tauri)             | runtime core                             | [![](https://img.shields.io/crates/v/tauri.svg)](https://crates.io/crates/tauri)                                 | ✅   | ✅   | ✅   |\n| [**bundler**](https://github.com/tauri-apps/tauri/tree/dev/tooling/bundler)     | manufacture the final binaries           | [![](https://img.shields.io/crates/v/tauri-bundler.svg)](https://crates.io/crates/tauri-bundler)                 | ✅   | ✅   | ✅   |\n\n## Introduction\nTauri is a framework for building tiny, blazingly fast binaries for all major desktop platforms. Developers can integrate any front-end framework that compiles to HTML, JS and CSS for building their user interface. The backend of the application is a rust-sourced binary with an API that the front-end can interact with.\n\nThe user interface in Tauri apps currently leverages [`tao`](https://docs.rs/tao) as a window handling library on macOS and Windows, and [`gtk`](https://gtk-rs.org/docs/gtk/) on Linux via the **Tauri-team** incubated and maintained [WRY](https://github.com/tauri-apps/wry), which creates a unified interface to the system webview (and other goodies like Menu and Taskbar), leveraging WebKit on macOS, WebView2 on Windows and WebKitGTK on Linux.\n\nTo learn more about the details of how all of these pieces fit together, please consult this [ARCHITECTURE.md](https://github.com/tauri-apps/tauri/blob/dev/ARCHITECTURE.md) document.\n\n## Get Started\nIf you are interested in making a tauri app, please visit the [documentation website](https://tauri.studio). This README is directed towards those who are interested in contributing to the core library. But if you just want a quick overview about where `tauri` is at in its development, here's a quick burndown:\n\n### Platforms\n- [x] Windows 7,8,10\n- [x] Linux\n- [x] macOS\n- [ ] iOS (in progress)\n- [ ] android (soon)\n\n### App Bundles\n- [x] App Icons\n- [x] Build on MacOS (.app, .dmg)\n- [x] Build on Linux (.deb, AppImage)\n- [x] Build on Windows (.exe, .msi)\n- [x] Copy Buffer\n- [x] Device Notifications (toast)\n- [x] Self Updater\n- [x] App Signing\n- [x] Frameless Mode\n- [x] Transparent Mode\n- [x] Multiwindow Mode\n- [x] Tray\n- [ ] deeplink RPC (in progress)\n- [ ] One-Time commands (coming soon)\n\n### Security Features\n- [x] localhost-free (:fire:)\n- [x] custom protocol for secure mode\n- [x] Dynamic ahead of Time Compilation (dAoT) with functional tree-shaking\n- [x] functional Address Space Layout Randomization\n- [x] OTP salting of function names and messages at runtime\n- [x] CSP Injection\n\n### Utilities\n- [x] GH Action for creating binaries for all platforms\n- [x] VS Code Extension\n- [x] Tauri Core Plugins\n- [x] Update core dependencies automatically from the command line\n- [x] Rust-based CLI\n\n### Comparison between Tauri and Electron\n\n| Detail                     | Tauri  | Electron             |\n| -------------------------- | ------ | -------------------- |\n| Installer Size Linux       | 3.1 MB | 52.1 MB              |\n| Memory Consumption Linux   | 180 MB | 462 MB               |\n| Launch Time Linux          | 0.39s  | 0.80s                |\n| Interface Service Provider | WRY    | Chromium             |\n| Backend Binding            | Rust   | Node.js (ECMAScript) |\n| Underlying Engine          | Rust   | V8 (C/C++)           |\n| FLOSS                      | Yes    | No                   |\n| Multithreading             | Yes    | Yes                  |\n| Bytecode Delivery          | Yes    | No                   |\n| Multiple Windows           | Yes    | Yes                  |\n| Auto Updater               | Yes    | Yes<sup>1</sup>      |\n| Custom App Icon            | Yes    | Yes                  |\n| Windows Binary             | Yes    | Yes                  |\n| MacOS Binary               | Yes    | Yes                  |\n| Linux Binary               | Yes    | Yes                  |\n| iOS Binary                 | Soon   | No                   |\n| Android Binary             | Soon   | No                   |\n| Desktop Tray               | Yes    | Yes                  |\n| Sidecar Binaries           | Yes    | No                   |\n\n#### Notes\n1. Electron has no native auto updater on Linux, but is offered by electron-packager\n\n## Development\n\nTauri is a system composed of a number of moving pieces:\n\n### Infrastructure\n- Git for code management\n- GitHub for project management\n- GitHub actions for CI and CD\n- Discord for discussions\n- Netlify-hosted documentation website\n- DigitalOcean meilisearch instance\n\n### Major Runtimes\n- Node.js for running the CLI (deno and pure rust are on the roadmap)\n- Cargo for testing, running the dev service, building binaries and as the runtime harness for the webview\n\n### Major Languages\n- Rust for the CLI\n- EcmaScript bindings to the Rust API, written in typescript\n- Rust for bindings, rust side of the API, harnesses\n- Rust plugins to Tauri backend\n\n### Operating systems\nTauri core can be developed on Mac, Linux and Windows, but you are encouraged to use the latest possible operating systems and build tools for your OS.\n\n### Contributing\nBefore you start working on something, it's best to check if there is an existing issue first. It's also is a good idea to stop by the Discord server and confirm with the team if it makes sense or if someone is already working on it.\n\nPlease make sure to read the [Contributing Guide](./.github/CONTRIBUTING.md) before making a pull request.\n\nThank you to everyone contributing to Tauri!\n\n### Documentation\nDocumentation in a polyglot system is a tricky proposition. To this end, we prefer to use inline documentation of Rust code and at JSDoc in typescript / javascript code. We autocollect these and publish them using Docusaurus v2 and netlify. Here is the hosting repository for the documentation site: https://github.com/tauri-apps/tauri-docs\n\n### Testing & Linting\nTest all the things! We have a number of test suites, but are always looking to improve our coverage:\n- Rust (`cargo test`) => sourced via inline `#[cfg(test)]` declarations\n- TS (`jest`) => via spec files\n- Smoke Tests (run on merges to latest)\n- eslint, clippy\n\n### CI/CD\nWe recommend you read this article to understand better how we run our pipelines: https://www.jacobbolda.com/setting-up-ci-and-cd-for-tauri/\n\n## Organization\nTauri aims to be a sustainable collective based on principles that guide [sustainable free and open software communities](https://sfosc.org). To this end it has become a Programme within the [Commons Conservancy](https://commonsconservancy.org/), and you can contribute financially via [Open Collective](https://opencollective.com/tauri).\n\n## Semver\n**tauri** is following [Semantic Versioning 2.0](https://semver.org/).\n\n## Licenses\nCode: (c) 2015 - 2021 - The Tauri Programme within The Commons Conservancy.\n\nMIT or MIT/Apache 2.0 where applicable.\n\nLogo: CC-BY-NC-ND\n- Original Tauri Logo Designs by [Alve Larsson](https://alve.io/), [Daniel Thompson-Yvetot](https://github.com/nothingismagick) and [Guillaume Chau](https://github.com/akryum)\n\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Ftauri-apps%2Ftauri?ref=badge_large)\n","url":"https://github.com/tauri-apps/tauri"},{"id":"github_tauri_apps_wry","name":"wry","description":"Cross-platform WebView library in Rust for Tauri.","kind":"code","stars":1335,"watchers":1335,"subscribers":23,"openIssues":50,"forks":82,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-05-09T07:12:23Z","createdAt":"2020-07-12T15:12:44Z","license":"Other","text":"<img src=\".github/splash.png\" alt=\"WRY Webview Rendering library\" />\n\n[![](https://img.shields.io/crates/v/wry?style=flat-square)](https://crates.io/crates/wry) [![](https://img.shields.io/docsrs/wry?style=flat-square)](https://docs.rs/wry/) ![](https://img.shields.io/crates/l/wry?style=flat-square)\n\nCross-platform WebView rendering library in Rust that supports all major desktop platforms like Windows, macOS, and Linux.\n\n<div align=\"center\">\n  <a href=\"https://gfycat.com/needywetelk\">\n    <img src=\"https://thumbs.gfycat.com/NeedyWetElk-size_restricted.gif\">\n  </a>\n</div>\n\n## Overview\n\nWry connects the web engine on each platform and provides easy to use and unified interface to render WebView. It also re-exports [tao] as a module for event loop and window creation.\n\n[tao]: https://crates.io/crates/tao\n\n## Usage\n\nThe minimum example to create a Window and browse a website looks like following:\n\n```rust\nfn main() -> wry::Result<()> {\n  use wry::{\n    application::{\n      event::{Event, StartCause, WindowEvent},\n      event_loop::{ControlFlow, EventLoop},\n      window::WindowBuilder,\n    },\n    webview::WebViewBuilder,\n  };\n\n  let event_loop = EventLoop::new();\n  let window = WindowBuilder::new()\n    .with_title(\"Hello World\")\n    .build(&event_loop)?;\n  let _webview = WebViewBuilder::new(window)?\n    .with_url(\"https://tauri.studio\")?\n    .build()?;\n\n  event_loop.run(move |event, _, control_flow| {\n    *control_flow = ControlFlow::Wait;\n\n    match event {\n      Event::NewEvents(StartCause::Init) => println!(\"Wry has started!\"),\n      Event::WindowEvent {\n        event: WindowEvent::CloseRequested,\n        ..\n      } => *control_flow = ControlFlow::Exit,\n      _ => (),\n    }\n  });\n}\n```\n\nThere are also more samples under `examples`, you can enter commands like the following to try them:\n\n```\ncargo run --example multi_window\n```\n\nFor more information, please read the documentation below.\n\n## [Documentation](https://docs.rs/wry)\n\n## Platform-specific notes\n\nAll platforms use [tao](https://github.com/tauri-apps/tao) to build the window, and wry re-exports it as an application module. Here is the underlying web engine each platform uses, and some dependencies you might need to install.\n\n### Linux\n\nTao uses [gtk-rs](https://gtk-rs.org/) and its related libraries for window creation and wry also needs [WebKitGTK](https://webkitgtk.org/) for WebView. So please make sure the following packages are installed:\n\n#### Arch Linux / Manjaro:\n\n```bash\nsudo pacman -S webkit2gtk\nsudo pacman -S libappindicator-gtk3 # not required\n```\n\nThe `libayatana-indicator` package can be installed from the Arch User Repository (AUR).\n\n#### Debian / Ubuntu:\n\n```bash\nsudo apt install libwebkit2gtk-4.0-dev libayatana-appindicator3-dev\nsudo apt install libappindicator3-dev # not required\n```\n\n#### Fedora\n\n```bash\nsudo dnf install gtk3-devel webkit2gtk3-devel libappindicator-gtk3-devel\n```\n\nFedora does not have the Ayatana package yet, so you need to use the GTK one, see the [feature flags documentation](https://docs.rs/wry/latest/wry/#feature-flags).\n\n### macOS\n\nWebKit is native on macOS so everything should be fine.\n\nIf you are cross-compiling for macOS using [osxcross](https://github.com/tpoechtrager/osxcross) and encounter a runtime panic like `Class with name WKWebViewConfiguration could not be found` it's possible that `WebKit.framework` has not been linked correctly, to fix this set the `RUSTFLAGS` environment variable:\n\n```\nRUSTFLAGS=\"-l framework=WebKit\" cargo build --target=x86_64-apple-darwin --release\n```\n\n### Windows\n\nWebView2 provided by Microsoft Edge Chromium is used. So wry supports Windows 7, 8, and 10.\n\n### Android / iOS\n\nWe have experimental support of mobile ends. If you are interested in playing or hacking it, please follow this [note](https://hackmd.io/XIcEwk4GSxy8APZhSa0UnA?view).\n\n## License\nApache-2.0/MIT\n","url":"https://github.com/tauri-apps/wry"},{"id":"github_tauri_apps_tao","name":"tao","description":"The TAO of cross-platform windowing. A library in Rust built for Tauri.","kind":"code","stars":312,"watchers":312,"subscribers":16,"openIssues":69,"forks":31,"defaultBranch":"dev","language":"Rust","topics":[],"isTemplate":false,"lastUpdated":"2022-05-09T06:18:27Z","createdAt":"2021-05-03T02:40:47Z","license":"Apache License 2.0","text":"<img src=\".github/splash.png\" alt=\"TAO - Window Creation Library\" />\n\n[![](https://img.shields.io/crates/v/tao?style=flat-square)](https://crates.io/crates/tao) [![](https://img.shields.io/docsrs/tao?style=flat-square)](https://docs.rs/tao/) ![](https://img.shields.io/crates/l/tao?style=flat-square)\n\n[![Chat Server](https://img.shields.io/badge/chat-on%20discord-7289da.svg)](https://discord.gg/SpmNs4S)\n[![devto](https://img.shields.io/badge/blog-dev.to-black.svg)](https://dev.to/tauri)\n[![devto](https://img.shields.io/badge/documentation-tauri.studio-purple.svg)](https://tauri.studio/docs/getting-started/intro)\n[![https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg](https://good-labs.github.io/greater-good-affirmation/assets/images/badge.svg)](https://good-labs.github.io/greater-good-affirmation)\n[![support](https://img.shields.io/badge/sponsor-open%20collective-blue.svg)](https://opencollective.com/tauri)\n\n\nCross-platform application window creation library in Rust that supports all major platforms like \nWindows, macOS, Linux, iOS and Android. Built for you, maintained for Tauri.\n\n### Cargo Features\n\nTao provides the following features, which can be enabled in your `Cargo.toml` file:\n* `serde`: Enables serialization/deserialization of certain types with [Serde](https://crates.io/crates/serde).\n* `tray`: Enables system tray and more menu item variants on **Linux**. This flag is enabled by default.\n  You can still create those types if you disable it. They just don't create the actual objects. We set this flag because some implementations require more installed packages.\n* `ayatana-tray`: Enable this if you wish to use more update `libayatana-appindicator` since `libappindicator` is no longer maintained.\n  This flag is enabled by default. Disable this if you don't want to install the `libayatana-appindicator` package.\n* `gtk-tray`: Enable this if you wish ot use `libappindicator` for tray on **Linux**. The package is supported on more Linux distributions, but it is not maintained anymore.\n  Note that `ayatana-tray` and `gtk-tray` cannot be enabled at the same time, so `default-features` must be set to `false`.\n\n## Platform-specific notes\n\n### Android\n\nThis library makes use of the [ndk-rs](https://github.com/rust-windowing/android-ndk-rs) crates, refer to that repo for more documentation.\n\nRunning on an Android device needs a dynamic system library, add this to Cargo.toml:\n```toml\n[[example]]\nname = \"request_redraw_threaded\"\ncrate-type = [\"cdylib\"]\n```\n\nAnd add this to the example file to add the native activity glue:\n\n```rust\n#[cfg_attr(target_os = \"android\", ndk_glue::main(backtrace = \"on\"))]\nfn main() {\n    ...\n}\n```\n\nAnd run the application with `cargo apk run --example request_redraw_threaded`\n\n### Linux\n\nGtk and its related libraries are used to build the support of Linux. Be sure to install following packages before building:\n\n#### Arch Linux / Manjaro:\n\n```bash\nsudo pacman -S gtk3 libappindicator-gtk3\n```\n\n#### Debian / Ubuntu:\n\n```bash\nsudo apt install libgtk-3-dev libappindicator3-dev\n```\n\n#### MacOS\n\nTo ensure compatibility with older MacOS systems, tao links to\nCGDisplayCreateUUIDFromDisplayID through the CoreGraphics framework.\nHowever, under certain setups this function is only available to be linked\nthrough the newer ColorSync framework. So, tao provides the\n`TAO_LINK_COLORSYNC` environment variable which can be set to `1` or `true`\nwhile compiling to enable linking via ColorSync.\n\n### Acknowledgement\n\nThis is a fork of [winit](https://crates.io/crates/winit) which replaces Linux's port to Gtk.\nWe need it not only because webkit2gtk, but also a lot Desktop Environment features like menu bar, system tray, global shortcuts etc.\nIn the future, we want to make these features more modular as separate crates. So we could switch back to winit and also benefit whole community.\n","url":"https://github.com/tauri-apps/tao"},{"id":"github_tauri_apps_tauri_action","name":"tauri-action","description":"Build your Web application as a Tauri binary for MacOS, Linux and Windows","kind":"unknown","stars":156,"watchers":156,"subscribers":10,"openIssues":27,"forks":27,"defaultBranch":"dev","language":"TypeScript","topics":["github-actions","hacktoberfest"],"isTemplate":false,"lastUpdated":"2022-05-08T05:18:22Z","createdAt":"2020-07-07T21:41:23Z","license":"MIT License","text":"# Tauri GitHub Action\n\nThis GitHub Action builds your Web application as a Tauri native binary for MacOS, Linux and Windows.\nIf your project doesn't include the Tauri files, we create it at compile time, so if you don't need to use Tauri's API, you can just ship native apps through this Action.\n\n# Usage\n\nThis GitHub Action has three main usages: test the build pipeline of your Tauri app, uploading Tauri artifacts to an existing release, and creating a new release with the Tauri artifacts.\n\n## Testing the Build\n\n```yml\nname: \"test-on-pr\"\non: [pull_request]\n\njobs:\n  test-tauri:\n    strategy:\n      fail-fast: false\n      matrix:\n        platform: [macos-latest, ubuntu-latest, windows-latest]\n\n    runs-on: ${{ matrix.platform }}\n    steps:\n    - uses: actions/checkout@v2\n    - name: setup node\n      uses: actions/setup-node@v4.2.0
